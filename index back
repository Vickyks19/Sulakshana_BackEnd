if (!check) {
  return res.json("Invalid Credentials");
}
import express from "express";
import mongoose from "mongoose";
import Profile from "./userDetail.js";
import Frame from "./Frame.js";
import Mount from "./Mount.js";
import cors from "cors";
import bycrypt from "bcrypt";
import Glass from "./Glass.js";
import Hardboard from "./Hardboard.js";
import Tax from "./Tax.js";
import Counter from "./counter.js";

const app = express();
app.use(cors());
app.use(express.json());
const port = process.env.PORT || 4000;

const mongourl =
  "mongodb+srv://Vignesh:fNKwJWynI5Yu4Veg@cluster0.bbf1qbc.mongodb.net/?retryWrites=true&w=majority";

mongoose
  .connect(mongourl, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("DB Connnected");
  })
  .catch((e) => console.log(e));

const db = mongoose.connection;

app.get("/", (req, res) => {
  console.log("hello");
});

app.post("/Signup", async (req, res) => {
  const { username, password } = req.body;
  const data = {
    username: username,
    password: password,
  };

  const encryptedPassword = await bycrypt.hash(password, 10);
  try {
    const check = await Profile.create({
      username,
      password: encryptedPassword,
    });
    console.log(check);
    if (check) {
      return res.json("exist");
    } else {
      res.json("notexist");
      await UserInfo.insertMany([data]);
    }
  } catch (e) {
    console.log(e);
  }
  console.log(1, 2, 3, Profile);
});

app.post("/Login", async (req, res) => {
  const { username, password } = req.body;

  try {
    const check = await Profile.findOne({
      username,
    });

    console.log(check);
    if (check) {
      res.json("exist");
    } else {
      res.json("not exist");
    }
  } catch (e) {
    console.log(e);
  }
});

//Frame Api
app.post("/frame", async (req, res) => {
  const { name, width, height, rate } = req.body;

  const data = {
    // slNo: slNo,
    name: name,
    width: width,
    height: height,
    rate: rate,
  };

  try {
    const frame = await Frame.create({
      // slNo,
      name,
      width,
      height,
      rate,
    });
    console.log(frame);
    if (frame) {
      res.send({ data: frame });
    } else {
      res.send({ message: "not ok" });
    }
  } catch (e) {
    console.log(e);
  }

  console.log(1, 2, 3, Frame);
});

app.get("/frameData", async (req, res) => {
  try {
    const frameData = await Frame.find({});
    res.send({ data: frameData });
  } catch (e) {
    console.log(e);
  }
});

app.put("/frameData/:_id", async (req, res) => {
  try {
    const frame = await Frame.findByIdAndUpdate(
      req.params._id,
      {
        $set: req.body,
      },
      { new: true }
    );
    console.log(frame);
    if (frame) {
      res.send({ data: frame });
      console.log(frame);
    }
  } catch (error) {
    console.log(error);
  }
});

app.delete("/frameData/:_id", async (req, res) => {
  console.log(req.params.id);

  try {
    const frame = await Frame.findByIdAndDelete(req.params._id);
    console.log(frame);
    if (!frame) {
      res.send({ message: "Successfully delete" });
    } else {
      res.send({ message: "error" });
    }
  } catch (e) {
    console.log(e);
  }
  console.log(1, 2, 3, Frame);
});

//Mount Api
app.post("/mount", async (req, res) => {
  const { name, width, height, rate } = req.body;
  const data = {
    // slNo: slNo,
    name: name,
    width: width,
    height: height,
    rate: rate,
  };

  try {
    const mount = await Mount.create({
      // slNo,
      name,
      width,
      height,
      rate,
    });
    console.log(mount);
    if (mount) {
      res.send({ data: mount });
    } else {
      res.send({ message: "not ok" });
    }
  } catch (e) {
    console.log(e);
  }
  console.log(1, 2, 3, Mount);
});

app.get("/mountData", async (req, res) => {
  try {
    const mountData = await Mount.find({});
    res.send({ data: mountData });
  } catch (e) {
    console.log(e);
  }
});

app.put("/mountData/:_id", async (req, res) => {
  try {
    const mount = await Mount.findByIdAndUpdate(
      req.params._id,
      {
        $set: req.body,
      },
      { new: true }
    );
    console.log(mount);
    if (mount) {
      res.send({ data: mount });
      // console.log(frame);
    }
  } catch (error) {
    console.log(error);
  }
});

app.delete("/mountData/:_id", async (req, res) => {
  try {
    const mount = await Mount.findByIdAndDelete(req.params._id);
    // console.log(frame);
    if (!mount) {
      res.send({ message: "Successfully delete" });
    } else {
      res.send({ message: "error" });
    }
  } catch (e) {
    console.log(e);
  }
});

//Glass Api
app.post("/glass", async (req, res) => {
  const { name, width, height, rate } = req.body;
  const data = {
    // slNo: slNo,
    name: name,
    width: width,
    height: height,
    rate: rate,
  };

  try {
    const glass = await Glass.create({
      // slNo,
      name,
      width,
      height,
      rate,
    });
    // console.log(frame);
    if (glass) {
      res.send({ data: glass });
    } else {
      res.send({ message: "not ok" });
    }
  } catch (e) {
    console.log(e);
  }
  console.log(1, 2, 3, Glass);
});

app.get("/glassData", async (req, res) => {
  try {
    const glassData = await Glass.find({});
    res.send({ data: glassData });
  } catch (e) {
    console.log(e);
  }
});

app.put("/glassData/:_id", async (req, res) => {
  try {
    const glass = await Glass.findByIdAndUpdate(
      req.params._id,
      {
        $set: req.body,
      },
      { new: true }
    );
    // console.log(frame);
    if (glass) {
      res.send({ data: glass });
      // console.log(frame);
    }
  } catch (error) {
    console.log(error);
  }
});

app.delete("/glassData/:_id", async (req, res) => {
  try {
    const glass = await Glass.findByIdAndDelete(req.params._id);
    // console.log(frame);
    if (!glass) {
      res.send({ message: "Successfully delete" });
    } else {
      res.send({ message: "error" });
    }
  } catch (e) {
    console.log(e);
  }
});

//Hardboard Api
app.post("/hardboard", async (req, res) => {
  const { name, width, height, rate } = req.body;
  const data = {
    // slNo: slNo,
    name: name,
    width: width,
    height: height,
    rate: rate,
  };

  try {
    const hardboard = await Hardboard.create({
      // slNo,
      name,
      width,
      height,
      rate,
    });
    console.log(hardboard);
    if (hardboard) {
      res.send({ data: hardboard });
    } else {
      res.send({ message: "not ok" });
    }
  } catch (e) {
    console.log(e);
  }
  // console.log(1, 2, 3, Glass);
});

app.get("/hardboardData", async (req, res) => {
  try {
    const hardboardData = await Hardboard.find({});
    res.send({ data: hardboardData });
  } catch (e) {
    console.log(e);
  }
});

app.put("/hardboardData/:_id", async (req, res) => {
  try {
    const hardboard = await Hardboard.findByIdAndUpdate(
      req.params._id,
      {
        $set: req.body,
      },
      { new: true }
    );
    // console.log(frame);
    if (hardboard) {
      res.send({ data: hardboard });
      // console.log(frame);
    }
  } catch (error) {
    console.log(error);
  }
});

app.delete("/hardboardData/:_id", async (req, res) => {
  try {
    const hardboard = await Hardboard.findByIdAndDelete(req.params._id);
    // console.log(frame);
    if (!hardboard) {
      res.send({ message: "Successfully delete" });
    } else {
      res.send({ message: "error" });
    }
  } catch (e) {
    console.log(e);
  }
});

//Tax Api
app.post("/tax", async (req, res) => {
  const { taxpercentage } = req.body;
  const data = {
    taxpercentage: taxpercentage,
  };

  try {
    const tax = await Tax.create({
      taxpercentage,
      // name,
      // width,
      // height,
      // rate,
    });
    console.log(tax);
    if (tax) {
      res.send({ data: tax });
    } else {
      res.send({ message: "not ok" });
    }
  } catch (e) {
    console.log(e);
  }
  // console.log(1, 2, 3, Glass);
});

app.get("/taxData", async (req, res) => {
  try {
    const taxData = await Tax.find({});
    res.send({ data: taxData });
  } catch (e) {
    console.log(e);
  }
});

app.listen(5000, () => {
  console.log("hi");
});

app.listen(port, () => console.log(`Listening to localhost: ${port}`));

if (check.password !== password) {
  return res.json("Invalid Credentials");
}

res.send("LOGIN");
console.log(1, 2, 3, Profile);
